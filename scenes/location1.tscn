[gd_scene load_steps=28 format=3 uid="uid://en1qhb41kmo1"]

[ext_resource type="Script" path="res://scripts/location1.gd" id="1_1gogc"]
[ext_resource type="PackedScene" uid="uid://bcosk50bvd44s" path="res://scenes/models/island_1.tscn" id="1_5l11e"]
[ext_resource type="PackedScene" uid="uid://fsl10uhparpb" path="res://scenes/player.tscn" id="2_7cgc4"]
[ext_resource type="PackedScene" uid="uid://bkre7tbkwedeg" path="res://scenes/models/skull_island.tscn" id="4_fc6qe"]
[ext_resource type="PackedScene" uid="uid://cfna3wpfbfwal" path="res://systems/minimap.tscn" id="6_c4p8m"]
[ext_resource type="PackedScene" uid="uid://duq5y7kindbmh" path="res://scenes/enemies/enemy.tscn" id="6_qghup"]
[ext_resource type="PackedScene" uid="uid://dk3t6c3cy2dto" path="res://NPCs/test_quest.tscn" id="7_m7511"]
[ext_resource type="PackedScene" uid="uid://cuuy5suppc24a" path="res://inventory/scenes/inventory.tscn" id="9_xjedj"]
[ext_resource type="Script" path="res://inventory/scripts/InventoryInterface.gd" id="10_qjkdp"]
[ext_resource type="PackedScene" uid="uid://cmhjr0iop0nnq" path="res://scenes/interactable/chest.tscn" id="12_8kcna"]
[ext_resource type="PackedScene" uid="uid://n5dc7p2v18kr" path="res://inventory/scenes/slot.tscn" id="12_xf5r7"]
[ext_resource type="Script" path="res://inventory/scripts/inventory_data.gd" id="13_6ceek"]
[ext_resource type="Resource" uid="uid://dhyko00qg7vfm" path="res://inventory/items/coin.tres" id="14_dmiqb"]
[ext_resource type="PackedScene" uid="uid://bcvdw5tyl651j" path="res://NPCs/bottle_pick_up.tscn" id="15_d04j7"]
[ext_resource type="Script" path="res://inventory/scripts/slot_data.gd" id="15_ofk2n"]

[sub_resource type="Shader" id="Shader_ens0n"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.1.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;

///
uniform sampler2D source_panorama : filter_nearest, source_color, hint_default_black;
uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;
	
	////
	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0); 
	sky += clouds;
	
	ground += clouds;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y));
}
"

[sub_resource type="Gradient" id="Gradient_s151v"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1avmy"]
noise_type = 3

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5yvbc"]
width = 1024
height = 1024
seamless = true
color_ramp = SubResource("Gradient_s151v")
noise = SubResource("FastNoiseLite_1avmy")

[sub_resource type="Gradient" id="Gradient_vafhs"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_80xdw"]
noise_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_p4ka5"]
width = 1024
height = 1024
seamless = true
color_ramp = SubResource("Gradient_vafhs")
noise = SubResource("FastNoiseLite_80xdw")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_agedd"]
shader = SubResource("Shader_ens0n")
shader_parameter/sky_top_color = Color(0.215686, 0.498039, 0.992157, 1)
shader_parameter/sky_horizon_color = Color(0.603922, 0.74902, 1, 1)
shader_parameter/sky_curve = 0.063
shader_parameter/sky_energy = 2.0
shader_parameter/sky_cover_modulate = Color(0.215686, 0.498039, 0.992157, 1)
shader_parameter/ground_bottom_color = Color(0.286275, 0.603922, 0.996078, 1)
shader_parameter/ground_horizon_color = Color(0.721569, 1, 1, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.565
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, -1)
shader_parameter/cloud_scale = Vector2(0.08, 0.08)
shader_parameter/cloud_distance = 0.035
shader_parameter/cloud_speed = 0.004
shader_parameter/cloud_speed2 = 0.004
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_5yvbc")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_p4ka5")

[sub_resource type="Sky" id="Sky_xpbqy"]
sky_material = SubResource("ShaderMaterial_agedd")

[sub_resource type="Environment" id="Environment_ahqhu"]
background_mode = 2
sky = SubResource("Sky_xpbqy")

[sub_resource type="Resource" id="Resource_eji77"]
script = ExtResource("15_ofk2n")
item_data = ExtResource("14_dmiqb")
quantity = 10

[sub_resource type="Resource" id="Resource_f37af"]
script = ExtResource("13_6ceek")
slot_data = Array[ExtResource("15_ofk2n")]([SubResource("Resource_eji77"), null, null, null, null])

[node name="location1" type="Node3D"]
script = ExtResource("1_1gogc")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433017, 0.25, 0.121918, 0.30203, 0.94547, -0.484912, 0.849279, -0.208772, 0, 4.79416, 0)
layers = 1048575
light_energy = 0.88
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_ahqhu")

[node name="island1" parent="." instance=ExtResource("1_5l11e")]
transform = Transform3D(5.75188, 0, 0, 0, 5.75188, 0, 0, 0, 5.75188, 0, 45.707, 75.7984)

[node name="enemy" parent="." instance=ExtResource("6_qghup")]
transform = Transform3D(2.29353, 0, -1.89482, 0, 2.975, 0, 1.89482, 0, 2.29353, -72.4933, 74.7771, 88.0227)
visible = false

[node name="skull_island" parent="." instance=ExtResource("4_fc6qe")]
transform = Transform3D(2.59865, 0, 0, 0, 2.59865, 0, 0, 0, 2.59865, -110.837, 52.7705, 20.2767)

[node name="player" parent="." instance=ExtResource("2_7cgc4")]
transform = Transform3D(-0.488286, 0, -0.872684, 0, 1, 0, 0.872684, 0, -0.488286, -86.0506, 74.36, 75.9943)

[node name="Minimap" type="CanvasLayer" parent="."]

[node name="Minimap" parent="Minimap" instance=ExtResource("6_c4p8m")]
target = NodePath("../../player")

[node name="test_quest" parent="." instance=ExtResource("7_m7511")]
transform = Transform3D(-2.01505, 0, -0.53993, 0, 2.08613, 0, 0.53993, 0, -2.01505, -77, 87.1137, 99)

[node name="UI" type="CanvasLayer" parent="."]

[node name="InventoryInterface" type="Control" parent="UI"]
visible = false
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("10_qjkdp")

[node name="PlayerInventory" parent="UI/InventoryInterface" instance=ExtResource("9_xjedj")]
layout_mode = 0
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 50.0

[node name="GrabbedSlot" parent="UI/InventoryInterface" instance=ExtResource("12_xf5r7")]
visible = false
modulate = Color(1, 1, 1, 0.501961)
self_modulate = Color(1, 1, 1, 0)
layout_mode = 0
offset_right = 64.0
offset_bottom = 64.0

[node name="ExternalInventory" parent="UI/InventoryInterface" instance=ExtResource("9_xjedj")]
visible = false
layout_mode = 0
offset_left = 694.0
offset_top = 323.0
offset_right = 734.0
offset_bottom = 363.0

[node name="Chest" parent="." instance=ExtResource("12_8kcna")]
transform = Transform3D(-2.1688, 0, -4.19856, 0, 4.72563, 0, 4.19856, 0, -2.1688, -63.9181, 74.1889, 90.8819)
inventory_data = SubResource("Resource_f37af")

[node name="bottle_pick_up" parent="." instance=ExtResource("15_d04j7")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -101, 77, 106)

[connection signal="drop_slot_data" from="UI/InventoryInterface" to="." method="_on_inventory_interface_drop_slot_data"]
[connection signal="gui_input" from="UI/InventoryInterface" to="UI/InventoryInterface" method="_on_gui_input"]
