[gd_scene load_steps=16 format=3 uid="uid://do7ncqognuvkm"]

[ext_resource type="Script" path="res://EndlessTerrain/EndlessTerrain.gd" id="1_r563f"]
[ext_resource type="PackedScene" uid="uid://cg7hfmg0b6g8a" path="res://Debug/debug.tscn" id="4_j26vx"]
[ext_resource type="PackedScene" uid="uid://4eyad0j15nfi" path="res://Player/Player.tscn" id="5_4ox3w"]
[ext_resource type="Script" path="res://scripts/Cloud_spawner.gd" id="6_6oqbt"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_fvdy5"]
noise_type = 3
frequency = 0.001
fractal_octaves = 4
fractal_lacunarity = 3.222
fractal_gain = 0.364
fractal_weighted_strength = 0.42
domain_warp_type = 2

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_y8pp7"]
transparency = 1
shading_mode = 0
albedo_color = Color(1, 1, 1, 0)

[sub_resource type="Shader" id="Shader_dg8kh"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.1.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;

///
uniform sampler2D source_panorama : filter_nearest, source_color, hint_default_black;
uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;


void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;
	

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0); 
	sky += clouds;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y));
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_7kpwc"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_h8bci"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_7kpwc")

[sub_resource type="Gradient" id="Gradient_612pa"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_rvuyi"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_05b72"]
width = 1024
height = 1024
seamless = true
color_ramp = SubResource("Gradient_612pa")
noise = SubResource("FastNoiseLite_rvuyi")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_e7sdr"]
shader = SubResource("Shader_dg8kh")
shader_parameter/sky_top_color = Color(0.180392, 0.509804, 1, 1)
shader_parameter/sky_horizon_color = Color(0.74902, 0.827451, 0.964706, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.223529, 0.0705882, 0.403922, 1)
shader_parameter/ground_horizon_color = Color(0.486275, 0.65098, 0.972549, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, -1)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_distance = 0.001
shader_parameter/cloud_speed = 0.005
shader_parameter/cloud_speed2 = 0.004
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_h8bci")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_05b72")

[sub_resource type="Sky" id="Sky_mh22s"]
sky_material = SubResource("ShaderMaterial_e7sdr")

[sub_resource type="Environment" id="Environment_6omts"]
background_mode = 2
sky = SubResource("Sky_mh22s")

[node name="World" type="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -21.9954, 0)

[node name="InfiniteTerrain" type="Node3D" parent="." node_paths=PackedStringArray("viewer")]
script = ExtResource("1_r563f")
chunkSize = 400
terrain_height = 130
view_distance = 2000
viewer = NodePath("../Player")
noise = SubResource("FastNoiseLite_fvdy5")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866024, -0.433016, 0.25, 0, 0.499998, 0.866027, -0.500003, 0.75, -0.43301, 0, 45.4051, 0)
shadow_enabled = true

[node name="debug" parent="." node_paths=PackedStringArray("player") instance=ExtResource("4_j26vx")]
player = NodePath("../Player")

[node name="Player" parent="." instance=ExtResource("5_4ox3w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0745595, 98.5242, -0.661785)
floor_snap_length = 0.45
gravity_enabled = true

[node name="CSGBox3D2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.33767, 36.9777, 9.48438)
visible = false
material_override = SubResource("StandardMaterial3D_y8pp7")
size = Vector3(137.238, 38.3533, 93.3381)
script = ExtResource("6_6oqbt")
clouds_to_spawn = 1000

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_6omts")
